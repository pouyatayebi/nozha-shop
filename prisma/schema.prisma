
// ==============================
//   تنظیمات Generator و دیتابیس
// ==============================

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================
//           Enums
// ==============================

enum Role {
  USER
  ADMIN
  Author
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DiscountType {
  PERCENT
  AMOUNT
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELED
}

enum PaymentGateway {
  ZARINPAL
  IDPAY
  NEXTPAY
}

enum ComponentType {
  IMAGE
  TEXT
  VIDEO
}

enum ShippingStatus {
  PENDING
  SHIPPED
  DELIVERED
  RETURNED
}

// ==============================
//         مدل‌های اصلی
// ==============================

// کاربران سایت
model User {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  phone       String        @unique
  role        Role          @default(USER)
  Cart        Cart[]
  Review      Review[]
  Session     Session[]
  Order       Order[]
  Wishlist    Wishlist[]
  UserAddress UserAddress[]
  posts       BlogPost[]
  avatarId    String?       @unique @db.Uuid
  avatar      Image?        @relation("UserAvatar", fields: [avatarId], references: [id])
  notifications Notification[]
  logs         AuditLog[]
  createdAt   DateTime?     @default(now()) @db.Timestamp(6)
  updatedAt   DateTime      @updatedAt @db.Timestamp(6)

  @@map("users")
}

// نشست کاربر برای احراز هویت
model Session {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires   DateTime @db.Timestamp(6)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map("sessions")
}

// OTP برای ورود با پیامک
model Otp {
  phone     String   @id
  code      String
  expiresAt DateTime

  @@map("otps")
}
// اعلان‌ها برای کاربران
model Notification {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?  @db.Uuid
  title     String
  message   String
  isRead    Boolean  @default(false)
  type      String
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
}

// لاگ فعالیت‌ها (برای ادمین یا گزارشات سیستم)
model AuditLog {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?  @db.Uuid
  action    String
  details   Json?
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
}



// سبد خرید کاربران
model Cart {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String?     @db.Uuid
  sessionCartId String?     @unique @db.Uuid
  User          User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items         CartItem[]
  itemsPrice    Decimal     @db.Decimal(12, 2)
  totalPrice    Decimal     @db.Decimal(12, 2)
  shippingPrice Decimal     @db.Decimal(12, 2)
  taxPrice      Decimal     @db.Decimal(12, 2)
  createdAt     DateTime    @default(now()) @db.Timestamp(6)
}

// آیتم‌های داخل سبد خرید
model CartItem {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cartId    String   @db.Uuid
  variantId String   @db.Uuid
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(12, 2)

  Cart    Cart    @relation(fields: [cartId], references: [id])
  Variant Variant @relation(fields: [variantId], references: [id])
}

// تصاویر
model Image {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url        String
  alt        String
  name       String?
  type       String?
  size       Int?
  variantId  String?    @db.Uuid
  Variant    Variant?   @relation(fields: [variantId], references: [id])
  userAvatar User?      @relation("UserAvatar")
  categories Category[]
  createdAt  DateTime   @default(now()) @db.Timestamp(6)
  updatedAt  DateTime   @updatedAt @db.Timestamp(6)
}

// دسته‌بندی محصولات
model Category {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title String
  slug          String         @unique
  parentId      String?        @db.Uuid
  imageId       String?        @db.Uuid
  descriptionId String?        @unique @db.Uuid
  seoId         String?        @unique @db.Uuid
  image         Image?         @relation(fields: [imageId], references: [id])
  description   TextComponent? @relation(fields: [descriptionId], references: [id])
  parent        Category?      @relation("CategoryToCategory", fields: [parentId], references: [id])
  children      Category[]     @relation("CategoryToCategory")
  Product       Product[]
  seo           Seo?           @relation(fields: [seoId], references: [id])
  createdAt     DateTime       @default(now()) @db.Timestamp(6)
  updatedAt     DateTime       @updatedAt @db.Timestamp(6)
}


// محصول
model Product {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String
  slug        String  @unique
  description String?
  categoryId  String? @db.Uuid

  rating     Decimal?  @default(0) @db.Decimal(3, 2)
  numReviews Int?      @default(0)
  isFeatured Boolean?  @default(false)
  Category   Category? @relation(fields: [categoryId], references: [id])
  Review     Review[]
  Variant    Variant[]

  tags      Tag[]      @relation("ProductTags")
  Wishlist  Wishlist[]
  seoId     String?    @unique @db.Uuid
  seo       Seo?       @relation(fields: [seoId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt @db.Timestamp(6)
}


// نظرات کاربران روی محصولات
model Review {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String   @db.Uuid
  productId          String   @db.Uuid
  rating             Int
  title              String
  description        String
  isVerifiedPurchase Boolean  @default(true)
  Product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  User               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime @default(now()) @db.Timestamp(6)
}




// مدل واریانت (تنوع محصول)
model Variant {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  stock      Int         @default(0)
  price      Decimal?    @default(0) @db.Decimal(12, 2)
  productId  String?     @db.Uuid
  Image      Image[]
  Product    Product?    @relation(fields: [productId], references: [id])
  Inventory  Inventory[]
  OrderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt @db.Timestamp(6)

  CartItem CartItem[]
}

// موجودی انبار
model Inventory {
  id        String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  variantId String         @db.Uuid
  quantity  Int            @default(0)
  updatedAt DateTime       @updatedAt @db.Timestamp(6)
  logs      InventoryLog[] // لاگ‌های تغییر موجودی
  Variant   Variant        @relation(fields: [variantId], references: [id])
}

// تاریخچه موجودی انبار
model InventoryLog {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inventoryId String   @db.Uuid
  change      Int // مثبت برای ورود کالا، منفی برای خروج
  reason      String? // توضیح اختیاری
  price      Decimal?    @default(0) @db.Decimal(12, 2) //برای بررسی تاریخچه قیمتهای یک محصول
  createdAt   DateTime @default(now()) @db.Timestamp(6)

  inventory Inventory @relation(fields: [inventoryId], references: [id])
}

// مرجوعی سفارش
model Return {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderItemId String       @db.Uuid
  reason      String
  status      ReturnStatus @default(PENDING)
  createdAt   DateTime     @default(now()) @db.Timestamp(6)
  updatedAt   DateTime     @updatedAt @db.Timestamp(6)

  OrderItem OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
}

// لیست علاقه‌مندی
model Wishlist {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  productId String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamp(6)

  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

// آدرس‌های کاربر
model UserAddress {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @db.Uuid
  address    String
  province   String
  city       String
  postalCode String   @default("1234567890")
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  updatedAt  DateTime @updatedAt @db.Timestamp(6)

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// تگ‌های محصولات
model Tag {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @unique
  slug      String    @unique
  products  Product[] @relation("ProductTags")
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @db.Timestamp(6)
}

// سفارش
model Order {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String      @db.Uuid
  User        User        @relation(fields: [userId], references: [id])
  totalAmount Decimal     @db.Decimal(12, 2)
  status      OrderStatus @default(PENDING)
  couponId    String?     @db.Uuid
  Coupon      Coupon?     @relation("CouponOrders", fields: [couponId], references: [id])
  OrderItems  OrderItem[]
  Shipping    Shipping?
  Payment     Payment?
  createdAt   DateTime    @default(now()) @db.Timestamp(6)
}

// آیتم‌های داخل سفارش
model OrderItem {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId   String  @db.Uuid
  variantId String  @db.Uuid // اضافه شده برای مشخص کردن نوع محصول
  quantity  Int
  unitPrice Decimal @db.Decimal(12, 2)
  total     Decimal @db.Decimal(12, 2)

  Order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  Variant   Variant  @relation(fields: [variantId], references: [id])
  Returns   Return[]
  createdAt DateTime @default(now()) @db.Timestamp(6)
}

// کوپن تخفیف
model Coupon {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code         String       @unique
  description  String?
  discountType DiscountType
  value        Decimal      @db.Decimal(12, 2)
  usageLimit   Int?
  usedCount    Int          @default(0)
  expiresAt    DateTime?
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now()) @db.Timestamp(6)
  updatedAt    DateTime     @updatedAt @db.Timestamp(6)

  Orders Order[] @relation("CouponOrders")
}

/// اطلاعات ارسال سفارش
model Shipping {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId String @unique @db.Uuid
  Order   Order  @relation(fields: [orderId], references: [id])

  method        String /// نوع ارسال: "پست پیشتاز"، "تیپاکس"، "حضوری" و ...
  packagingType String /// نوع بسته‌بندی: "جعبه سایز 1"، "پاکت حبابدار A4" و ...
  trackingCode  String? /// کد رهگیری (در صورت وجود)
  weight        Decimal   @db.Decimal(10, 2) /// وزن نهایی بسته (کیلوگرم یا گرم)
  cost          Decimal   @db.Decimal(10, 2) /// هزینه ارسال (محاسبه‌شده)
  status        String    @default("در حال آماده‌سازی") /// وضعیت ارسال
  shippedAt     DateTime?
  deliveredAt   DateTime?
  createdAt     DateTime  @default(now())
}

// پرداخت
model Payment {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  /// شناسه سفارش مربوط به این پرداخت - فقط یک پرداخت برای هر سفارش مجاز است
  orderId     String        @unique @db.Uuid
  /// درگاه پرداخت مورد استفاده (مثلاً zarinpal, idpay, etc.)
  gateway     String
  /// کد مرجع اولیه‌ای که توسط درگاه داده می‌شود (authority یا token)
  authority   String?
  /// کد تأیید نهایی پرداخت موفق از درگاه (مثلاً ref_id یا tracking_code)
  referenceId String?
  /// مبلغ پرداخت به تومان (مثلاً 250000 برای ۲۵۰ هزار تومان)
  amount      Int
  /// وضعیت پرداخت از نوع PaymentStatus
  status      PaymentStatus @default(PENDING)
  /// زمان پرداخت موفق (در صورت موفقیت)
  paidAt      DateTime?
  /// زمان ساخت رکورد پرداخت
  createdAt   DateTime      @default(now())
  /// زمان آخرین بروزرسانی رکورد
  updatedAt   DateTime      @updatedAt
  /// رابطه با مدل سفارش
  order       Order         @relation(fields: [orderId], references: [id])
}

model Page {
  id         String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String
  slug       String             @unique
  components ContentComponent[] @relation("PageComponents")
  seoId      String?            @unique @db.Uuid
  seo        Seo?               @relation(fields: [seoId], references: [id])
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model BlogPost {
  id         String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String
  slug       String             @unique
  userId     String             @db.Uuid
  user       User               @relation(fields: [userId], references: [id])
  components ContentComponent[] @relation("BlogPostComponents")
  seoId      String?            @unique @db.Uuid
  seo        Seo?               @relation(fields: [seoId], references: [id])
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model ContentComponent {
  id    String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type  ComponentType
  order Int

  page   Page?   @relation("PageComponents", fields: [pageId], references: [id])
  pageId String? @db.Uuid

  blogPost   BlogPost? @relation("BlogPostComponents", fields: [blogPostId], references: [id])
  blogPostId String?   @db.Uuid

  image ImageComponent?
  text  TextComponent?
  video VideoComponent?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ImageComponent {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  imageUrl  String
  altText   String?
  caption   String?
  component ContentComponent @relation(fields: [id], references: [id])
}

model TextComponent {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content   String // Rich text as HTML or Markdown
  component ContentComponent @relation(fields: [id], references: [id])
  category  Category?        @relation
}

model VideoComponent {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  videoUrl  String
  caption   String?
  component ContentComponent @relation(fields: [id], references: [id])
}

model Seo {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String?
  description String?

  category Category?
  page     Page?
  product  Product?
  blogPost BlogPost?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

